#!/usr/bin/env ruby

require 'bundler/setup'
require 'travis'

$stdout.sync = true

Travis.config.log_level = :info
Travis.config.database.pool = 30
Travis::Database.connect
ActiveRecord::Base.logger.level = Logger::ERROR

Sidekiq.configure_client do |c|
  c.redis = { url: Travis.config.redis.url }
end

class Archiver; include Sidekiq::Worker; end

def time(msg)
  print "#{msg} ... ".rjust(20, ' ')
  start = Time.now
  result = yield
  print "done. #{Time.now - start}sec\n"
  result
end

def enqueue(count)
  logs = time "fetching #{count}" do
    # sql = "SELECT id, job_id FROM artifacts WHERE id < 3280461 AND archiving = 't' LIMIT #{count}"
    sql = "SELECT id, job_id FROM artifacts WHERE id < 3280461 AND archive_verified IS NULL LIMIT #{count}"
    Artifact.connection.select_rows(sql)
  end
  args = time 'converting' do
    logs.map { |log| [{ type: 'log', id: log[0], job_id: log[1] }] }
  end
  time 'queueing' do
    Sidekiq::Client.push_bulk('queue' => 'archive_past', 'class' => Archiver, 'args' => args)
  end
  time 'setting flag' do
    sql = "UPDATE artifacts SET archiving = 't' WHERE id IN (#{logs.map { |log| log[0] }.join(', ')})"
    Artifact.connection.execute(sql)
  end
  logs.size
end

sum = 0
1.upto(37) { count = enqueue(10_000); sum += count; puts "queued: #{count}; total: #{sum}"; break if count == 0 }
