#!/usr/bin/env ruby

require 'bundler/setup'
require 'travis'

$stdout.sync = true

Travis.config.log_level = :info
Travis::Database.connect
ActiveRecord::Base.logger.level = Logger::ERROR

Sidekiq.configure_client do |c|
  c.redis = { url: Travis.config.redis.url }
end

class Archiver; include Sidekiq::Worker; end

def http
  Faraday.new(ssl: Travis.config.ssl.compact) do |f|
    f.request :url_encoded
    f.adapter :net_http
  end
end

def verify(log)
  report   = []
  url      = "http://archive.travis-ci.org/jobs/#{log.job_id}/log.txt"
  response = http.get(url)
  actual   = response.headers['content-length']
  expected = log.content.bytesize.to_i

  if response.status == 200
    report << 'content-length is nil' if actual.nil?
    report << "actual length is #{actual.inspect} but expected #{expected.inspect}" if actual.to_i != expected
  else
    report << "response status: #{response.status}, expected length #{expected.inspect}"
  end

rescue Faraday::Error => e
  report << e.message
ensure
  if report.empty?
    # puts "[report][id: #{log.id}, job_id: #{log.job_id}] empty log" if actual.to_i == 0 && expected == 0
    attrs = {}
    attrs[:archived_at] = Time.now  unless log.archived_at
    attrs[:archive_verified] = true unless log.archive_verified
    log.update_attributes!(attrs) unless attrs.empty?
  else
    puts "\n[report][id: #{log.id}, job_id: #{log.job_id}] #{report.join(', ')}"

    Sidekiq::Client.push('queue' => 'archive_past', 'class' => Archiver, 'args' => [{ id: log.id, job_id: log.job_id }])

    attrs = { archiving: Time.now }
    attrs[:archived_at] = nil      if log.archived_at
    attrs[:archive_verified] = nil if log.archive_verified
    log.update_attributes!(attrs)
  end
end

def verify_all(from, to)
  sql = 'id BETWEEN ? AND ? AND (archive_verified = ? OR archive_verified IS NULL)'
  Artifact.find_each(conditions: [sql, from, to, false], batch_size: 5) do |log|
    puts "verifying id: #{log.id}, job_id: #{log.job_id}"
    verify(log)
  end
end

from = 0
to = 3_280_461
verify_all(from, to)
